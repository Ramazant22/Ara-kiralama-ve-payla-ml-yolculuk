const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const compression = require('compression');
const connectDB = require('./config/database');
const { securityMiddleware } = require('./config/security');

// Routes
const authRoutes = require('./routes/authRoutes');
const userRoutes = require('./routes/userRoutes');
const vehicleRoutes = require('./routes/vehicleRoutes');
const rentalRoutes = require('./routes/rentalRoutes');
const rideShareRoutes = require('./routes/rideShareRoutes');
const mobileRoutes = require('./routes/mobileRoutes');

// Çevre değişkenlerini yükle
dotenv.config();

// Veritabanı bağlantısı
connectDB();

const app = express();

// CORS ayarları
app.use(cors({
  origin: process.env.CORS_ORIGIN,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization', 'deviceid'],
  credentials: true
}));

// Güvenlik middleware'leri
securityMiddleware(app);

// Middleware
app.use(compression());
app.use(express.json({ limit: process.env.MAX_FILE_SIZE }));
app.use(express.urlencoded({ extended: true, limit: process.env.MAX_FILE_SIZE }));

// Debug için request logger
if (process.env.NODE_ENV === 'development') {
  app.use((req, res, next) => {
    console.log(`${req.method} ${req.url}`);
    next();
  });
}

// API Rotaları
app.use('/api/mobile', mobileRoutes);
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/vehicles', vehicleRoutes);
app.use('/api/rentals', rentalRoutes);
app.use('/api/ride-shares', rideShareRoutes);

// Ana route
app.get('/', (req, res) => {
  res.json({
    status: 'success',
    message: 'TakDrive API',
    version: '1.0.0'
  });
});

// 404 - Bulunamadı
app.use((req, res) => {
  res.status(404).json({
    status: 'fail',
    message: `${req.originalUrl} rotası bulunamadı`
  });
});

// Genel hata yönetimi
app.use((err, req, res, next) => {
  console.error('Hata:', err);
  const statusCode = err.statusCode || 500;
  res.status(statusCode).json({
    status: 'error',
    message: err.message || 'Sunucu hatası',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// Sunucuyu başlat
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Sunucu ${PORT} portunda çalışıyor (${process.env.NODE_ENV} modu)`);
});